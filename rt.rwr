rt {

Main [ TopLevel+] = ‛«TopLevel»’

TopLevel_defvar [ Defvar] =‛«Defvar»’
TopLevel_defn [ Defn] =‛«Defn»’
TopLevel_defclass [ Defclass] =‛«Defclass»’
TopLevel_import [ Import] =‛«Import»’
kw [ s] = ‛«s»’
Defvar [ _2 Assignment] = ‛«_2»«Assignment»’
Defn [ _4 ident Formals StatementBlock] = ‛«_4»«ident»«Formals»«StatementBlock»’
Defclass [ _6 ident _7 Definit _8] = ‛«_6»«ident»«_7»«Definit»«_8»’
Import [ _10 ident] = ‛«_10»«ident»’
StatementBlock [ _11 Statement+ _12] = ‛«_11»«Statement»«_12»’
Definit [ _14 _15 _17 _18 ident  _19 Formal* _20 _21 InitStatement+ _22] = ‛«_14»«_15»«_17»«_18»«ident»«_19»«Formal»«_20»«_21»«InitStatement»«_22»’

Statement_globals [ _24 ident  _25 ident*] =‛«_24»«ident»«_25»«ident»’
Statement_if [ IfStatement] =‛«IfStatement»’
Statement_pass [ _27] =‛«_27»’
Statement_return [ _29 ReturnExp] =‛«_29»«ReturnExp»’
Statement_for [ ForStatement] =‛«ForStatement»’
Statement_while [ WhileStatement] =‛«WhileStatement»’
Statement_try [ TryStatement] =‛«TryStatement»’
Statement_assignment [ Assignment] =‛«Assignment»’
Statement_call [ Lval] =‛«Lval»’
InitStatement [ _31 _32 ident _33 Exp] = ‛«_31»«_32»«ident»«_33»«Exp»’
IfStatement [ _35 Exp StatementBlock ElifStatement* ElseStatement?] = ‛«_35»«Exp»«StatementBlock»«ElifStatement»«ElseStatement»’
ElifStatement [ _37 Exp StatementBlock] = ‛«_37»«Exp»«StatementBlock»’
ElseStatement [ _39 StatementBlock] = ‛«_39»«StatementBlock»’
ForStatement [ _41 ident _43 Exp StatementBlock] = ‛«_41»«ident»«_43»«Exp»«StatementBlock»’
WhileStatement [ _45 Exp StatementBlock] = ‛«_45»«Exp»«StatementBlock»’
TryStatement [ _47 StatementBlock ExceptBlock+] = ‛«_47»«StatementBlock»«ExceptBlock»’

ExceptBlock_as [ _49 Exp _51 ident StatementBlock] =‛«_49»«Exp»«_51»«ident»«StatementBlock»’
ExceptBlock_basic [ _53 ident StatementBlock] =‛«_53»«ident»«StatementBlock»’

Assignment_pluseq [ Lval _54 Exp] =‛«Lval»«_54»«Exp»’
Assignment_multiple [ _55 Lval  _56 Lval+ _57 _58 Exp] =‛«_55»«Lval»«_56»«Lval»«_57»«_58»«Exp»’
Assignment_single [ Lval _59 Exp] =‛«Lval»«_59»«Exp»’

ReturnExp_multiple [ _60 Exp  _61 Exp+ _62] =‛«_60»«Exp»«_61»«Exp»«_62»’
ReturnExp_single [ Exp] =‛«Exp»’
Exp [ BooleanExp] = ‛«BooleanExp»’

BooleanExp_boolop [ BooleanExp boolOp BooleanNot] =‛«BooleanExp»«boolOp»«BooleanNot»’
BooleanExp_basic [ BooleanNot] =‛«BooleanNot»’

BooleanNot_not [ _64 BooleanExp] =‛«_64»«BooleanExp»’
BooleanNot_basic [ AddExp] =‛«AddExp»’

AddExp_plus [ AddExp _65 MulExp] =‛«AddExp»«_65»«MulExp»’
AddExp_minus [ AddExp _66 MulExp] =‛«AddExp»«_66»«MulExp»’
AddExp_basic [ MulExp] =‛«MulExp»’

MulExp_times [ MulExp _67 ExpExp] =‛«MulExp»«_67»«ExpExp»’
MulExp_divide [ MulExp _68 ExpExp] =‛«MulExp»«_68»«ExpExp»’
MulExp_basic [ ExpExp] =‛«ExpExp»’

ExpExp_power [ PriExp _69 ExpExp] =‛«PriExp»«_69»«ExpExp»’
ExpExp_basic [ PriExp] =‛«PriExp»’

PriExp_paren [ _70 Exp _71] =‛«_70»«Exp»«_71»’
PriExp_emptylistconst [ _72 _73] =‛«_72»«_73»’
PriExp_listconst [ _74 PriExpComma+ _75] =‛«_74»«PriExpComma»«_75»’
PriExp_emptydict [ _76 _77] =‛«_76»«_77»’
PriExp_dict [ _78 PairComma+ _79] =‛«_78»«PairComma»«_79»’
PriExp_lambda [ _80 Formals? _81 Exp] =‛«_80»«Formals»«_81»«Exp»’
PriExp_fresh [ _83 _84 ident _85] =‛«_83»«_84»«ident»«_85»’
PriExp_pos [ _86 PriExp] =‛«_86»«PriExp»’
PriExp_neg [ _87 PriExp] =‛«_87»«PriExp»’
PriExp_phi [ phi] =‛«phi»’
PriExp_true [ _88] =‛«_88»’
PriExp_false [ _89] =‛«_89»’
PriExp_range [ _91 _92 Exp _93] =‛«_91»«_92»«Exp»«_93»’
PriExp_string [ string] =‛«string»’
PriExp_number [ number] =‛«number»’
PriExp_identwithtail [ ident PrimaryTail] =‛«ident»«PrimaryTail»’
PriExp_ident [ ident] =‛«ident»’
PriExpComma [ PriExp _94?] = ‛«PriExp»«_94»’
PairComma [ Pair _95?] = ‛«Pair»«_95»’
Lval [ Exp PrimaryTail?] = ‛«Exp»«PrimaryTail»’
keyword [ _144] = ‛«_144»’
ident [ identHead identTail*] = ‛«identHead»«identTail»’
identHead [ _146] = ‛«_146»’
identTail [ _147] = ‛«_147»’

Formals_noformals [ _148 _149] =‛«_148»«_149»’
Formals_withformals [ _150 Formal CommaFormal* _151] =‛«_150»«Formal»«CommaFormal»«_151»’
Formal [ ident  _152 Exp?] = ‛«ident»«_152»«Exp»’
CommaFormal [ _153 Formal] = ‛«_153»«Formal»’

Actuals_noactuals [ _154 _155] =‛«_154»«_155»’
Actuals_actuals [ _156 Actual CommaActual* _157] =‛«_156»«Actual»«CommaActual»«_157»’
Actual [ ParamName? Exp] = ‛«ParamName»«Exp»’
CommaActual [ _158 Actual] = ‛«_158»«Actual»’
ParamName [ ident _159] = ‛«ident»«_159»’

number_fract [ digit* _160 digit+] =‛«digit»«_160»«digit»’
number_whole [ digit+] =‛«digit»’
Pair [ string _161 Exp _162?] = ‛«string»«_161»«Exp»«_162»’

PrimaryTail_methodcall [ MethodCall PrimaryTail?] =‛«MethodCall»«PrimaryTail»’
PrimaryTail_offsetref [ OffsetRef PrimaryTail?] =‛«OffsetRef»«PrimaryTail»’
PrimaryTail_lookup [ FieldLookup PrimaryTail?] =‛«FieldLookup»«PrimaryTail»’
PrimaryTail_slice [ Slice PrimaryTail?] =‛«Slice»«PrimaryTail»’
MethodCall [ Actuals] = ‛«Actuals»’
OffsetRef [ _163 ident] = ‛«_163»«ident»’

FieldLookup_slicefirst [ _164 _165 _166] =‛«_164»«_165»«_166»’
FieldLookup_lookup [ _167 Exp _168] =‛«_167»«Exp»«_168»’

Slice_slicewhole [ _169 _170 _171] =‛«_169»«_170»«_171»’
Slice_slicerest [ _172 _173 _174 _175] =‛«_172»«_173»«_174»«_175»’
Slice_nthslice [ _176 digit+ _177 _178] =‛«_176»«digit»«_177»«_178»’
boolOp [ _191] = ‛«_191»’
phi [ _192] = ‛«_192»’

string_fdqstring [ _193 notdq* _194] =‛«_193»«notdq»«_194»’
string_fsqstring [ _195 notsq* _196] =‛«_195»«notsq»«_196»’
string_dqstring [ _197 notdq* _198] =‛«_197»«notdq»«_198»’
string_sqstring [ _199 notsq* _200] =‛«_199»«notsq»«_200»’
notdq [ any] = ‛«any»’
notsq [ any] = ‛«any»’
comment [ _203 notnl* nl] = ‛«_203»«notnl»«nl»’
nl [ _204] = ‛«_204»’
notnl [ any] = ‛«any»’
space [ comment] = ‛«comment»’
}
