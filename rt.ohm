rt {
  Main = TopLevel+
  TopLevel =
    | Defvar -- defvar
    | Defn -- defn
    | Defclass -- defclass

   Defvar = kw<"defvar"> Assignment
   Defn = kw<"defn"> ident Formals StatementBlock
   Defclass = kw<"defclass"> ident "{" Definit "}"

   StatementBlock = "{" Statement+ "}"

   Definit = kw<"definit"> "(" kw<"self"> ":" ident ("," ident)*")" "{" InitStatement+ "}"
   
   Statement =
     | kw<"global"> ident ("," ident)* -- globals
     | IfStatement -- if
     | kw<"pass"> -- pass
     | kw<"return"> Exp -- return
     | ForStatement -- for
     | WhileStatement -- while
     | Assignment -- assignment
     | Lval  -- call

   InitStatement = kw<"self"> "." ident "=" Exp

   IfStatement = kw<"if"> Exp StatementBlock ElifStatement* ElseStatement?
   ElifStatement = kw<"elif"> Exp StatementBlock
   ElseStatement = kw<"else"> StatementBlock

   ForStatement = kw<"for"> ident kw<"in"> Exp StatementBlock
   WhileStatement = kw<"while"> Exp StatementBlock

   Assignment = 
     | Lval "+=" Exp -- pluseq
     | Lval "=" Exp -- eq

    Exp
      = BooleanExp

    BooleanExp =
      | BooleanExp boolOp AddExp -- boolop
      | AddExp

    AddExp
      = AddExp "+" MulExp  -- plus
      | AddExp "-" MulExp  -- minus
      | MulExp

    MulExp
      = MulExp "*" ExpExp  -- times
      | MulExp "/" ExpExp  -- divide
      | ExpExp

    ExpExp
      = PriExp "^" ExpExp  -- power
      | PriExp

    PriExp =
      | "(" Exp ")"  -- paren
      | "[" "]" -- emptylistconst
      | "[" (PriExp ","?)+ "]" -- listconst
      | "{" "}" -- emptydict
      | "{" (Pair ","?)+ "}" -- dict
      | "λ" Formals? ":" Exp -- lambda
      | kw<"fresh"> "(" ident ")" -- fresh
      | "+" PriExp   -- pos
      | "-" PriExp   -- neg
      | phi -- phi
      | "⊤" -- true
      | "⊥" -- false
      | kw<"range"> "(" Exp ")" -- range
      | string -- string
      | PriExp Actuals -- call
      | Lval -- lval
      | number -- number

    Lval =
      | ident FieldRef -- fieldref
      | ident Subscript -- subscript
      | ident -- ident


    keyword =
      | kw<"fresh">
      | kw<"defvar">
      | kw<"defn">
      | kw<"defclass">
      | kw<"definit">
      | kw<"self">
      | kw<"useglobal">
      | kw<"pass">
      | kw<"return">
      | kw<"if">
      | kw<"elif">
      | kw<"else">
      | kw<"and">
      | kw<"or">
      | kw<"in">
      | kw<"range">
      | kw<"while">
      
    ident  (an identifier)
      = ~keyword identHead identTail*

    identHead = "_" | letter
    identTail = alnum | identHead

    Formals =
      | "(" ")" -- noformals
      | "(" Formal ("," Formal)* ")" -- withformals

    Formal = ident ("=" Exp)?
    
    Actuals = 
      | "(" ")" -- noactuals
      | "(" Actual ("," Actual)* ")" -- actuals

   Actual =
     | ParamName? Exp

   ParamName = ident "="

    number  (a number)
      = digit* "." digit+  -- fract
      | digit+             -- whole

    Pair = string ":" Exp ","?

  FieldRef = 
    | "[" string "]" FieldRef? -- field
    | "." ident Actuals FieldRef? -- method
    | "." ident FieldRef? -- attribute
    
  Subscript =
    | "[" ":" "]" -- slicewhole
    | "[" "1" ":" "]" -- slicerest
    | "[" number "]" -- num
    | "[" ident "]" -- ident
    | "[" Exp "]" -- exp

  boolOp = ("==" | "<=" | ">=" | ">" | "<" | kw<"and"> | kw<"or">) 
  phi = "ϕ"
  string =
    | "f" string -- fstring
    | basicstring -- basic
  basicstring =
    | "\"" notdq* "\"" -- dqstring
    | "'" notsq* "'" -- sqstring
  notdq = ~"\"" any
  notsq = ~"'" any

   kw<s> = s ~identTail

  comment = "#" notnl* nl
  nl = "\n"
  notnl = ~nl any
  space += comment

}